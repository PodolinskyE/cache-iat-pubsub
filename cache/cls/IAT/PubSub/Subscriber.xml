<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="IAT.PubSub.Subscriber">
<Description>
Generic subscriber for Publisher-Subscriber system.
All subscriber *MUST* extend from this class.</Description>
<IncludeCode>IAT.PubSub</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63881,37731.032449</TimeCreated>

<Property name="Channel">
<Description>
Subscribed channel</Description>
<Type>%String</Type>
</Property>

<Property name="Resource">
<Description>
Resource name for subscribed channel (see $system.Event) </Description>
<Type>%String</Type>
</Property>

<Property name="Header">
<Description>
Header of the message received. </Description>
<Type>MsgHeader</Type>
</Property>

<Method name="Start">
<Description>
Start running subscriber. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pChannel:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		$$$LOG(pChannel)
		set obj = ..%New(pChannel)
		if obj=$$$NULLOREF $$$ThrowStatus(%objlasterror)
		do obj.Run()
	} catch ex {
		set ret = ex.AsStatus()
		$$$LOG($system.Status.GetErrorText(ret))
	}
	quit ret
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Create a Subscriber from a given channel.</Description>
<FormalSpec>pChannel:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		set ..Channel = pChannel
		set ..Resource = $$$ResourceName(pChannel)
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="Run">
<Description>
Subscriber run method. Wait for a message and process it.
User *MUST* implement OnMessage callback.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		for {
			// wait until a message is received
			set data = $system.Event.WaitMsg(..Resource)
			
			// retrieve data from event
			set code = $listget(data,1)
			set headerId = $listget(data,2)
			
			// dequeueu message from queue
			kill $$$Queue(..Channel, headerId)
			$$$LOG("Grabs: "_headerId)
			
			// instantiate message header
			set ..Header = ##class(MsgHeader).%OpenId(headerId)
			$$$LOG(..Header.BodyClass_" "_..Header.BodyId)
			
			// instantiate message body
			set body = $classmethod(..Header.BodyClass, "%OpenId", ..Header.BodyId)
			
			// execute user callback for given body
			$$$ThrowOnError(..OnMessage(body))
		}
	} catch ex {
		set ret = ex.AsStatus()
		$$$LOG($system.Status.GetOneErrorText(ret))
	}
]]></Implementation>
</Method>

<Method name="OnMessage">
<Description>
Callback that is called when a message is received by subscriber</Description>
<FormalSpec>pBody:IAT.PubSub.MsgBody</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$ERROR($$$NotImplemented)
]]></Implementation>
</Method>
</Class>
</Export>
